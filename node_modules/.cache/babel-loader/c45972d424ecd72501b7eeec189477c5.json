{"ast":null,"code":"var _jsxFileName = \"/Users/beomsukim/2022/MAEN-client-master/src/components/search/SearchTag.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport SearchTagStyled from \"../styled/searchStyled/SearchTagStyled\";\nimport Content from \"../main/Content\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getSearch } from \"../../redux/module/search\";\nimport Post from \"../main/Post\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchTag = () => {\n  _s();\n\n  const [isExist, setIsExist] = useState(false);\n  const keyword = useSelector(state => state.search.input);\n  const results = useSelector(state => state.search.results);\n  const dispatch = useDispatch();\n  useEffect(async () => {\n    await dispatch(getSearch(keyword));\n\n    if (results.length == 0) {\n      setIsExist(false);\n    } else {\n      setIsExist(true);\n    }\n  }, [results, keyword]);\n  console.log(\"render\");\n  const resultList = results.map((post, index) => /*#__PURE__*/_jsxDEV(Post, {\n    post: post\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(SearchTagStyled, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), resultList]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchTag, \"6+bJXu7eV+2sdOux4AeccuA9sfA=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = SearchTag;\nexport default SearchTag;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchTag\");","map":{"version":3,"sources":["/Users/beomsukim/2022/MAEN-client-master/src/components/search/SearchTag.js"],"names":["React","useEffect","useState","SearchTagStyled","Content","useDispatch","useSelector","getSearch","Post","SearchTag","isExist","setIsExist","keyword","state","search","input","results","dispatch","length","console","log","resultList","map","post","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,eAAP,MAA4B,wCAA5B;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,OAAOC,IAAP,MAAiB,cAAjB;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAMU,OAAO,GAAGN,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACC,MAAN,CAAaC,KAAzB,CAA3B;AACA,QAAMC,OAAO,GAAGV,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACC,MAAN,CAAaE,OAAzB,CAA3B;AACA,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AAEAJ,EAAAA,SAAS,CAAC,YAAY;AACpB,UAAMgB,QAAQ,CAACV,SAAS,CAACK,OAAD,CAAV,CAAd;;AACA,QAAII,OAAO,CAACE,MAAR,IAAkB,CAAtB,EAAyB;AACvBP,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAFD,MAEO;AACLA,MAAAA,UAAU,CAAC,IAAD,CAAV;AACD;AACF,GAPQ,EAON,CAACK,OAAD,EAAUJ,OAAV,CAPM,CAAT;AAQAO,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AAEA,QAAMC,UAAU,GAAGL,OAAO,CAACM,GAAR,CAAY,CAACC,IAAD,EAAOC,KAAP,kBAC7B,QAAC,IAAD;AAAkB,IAAA,IAAI,EAAED;AAAxB,KAAWC,KAAX;AAAA;AAAA;AAAA;AAAA,UADiB,CAAnB;AAIA,sBACE,QAAC,eAAD;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGH,UAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CA1BD;;GAAMZ,S;UAEYH,W,EACAA,W,EACCD,W;;;KAJbI,S;AA4BN,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport SearchTagStyled from \"../styled/searchStyled/SearchTagStyled\";\nimport Content from \"../main/Content\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getSearch } from \"../../redux/module/search\";\nimport Post from \"../main/Post\";\n\nconst SearchTag = () => {\n  const [isExist, setIsExist] = useState(false);\n  const keyword = useSelector((state) => state.search.input);\n  const results = useSelector((state) => state.search.results);\n  const dispatch = useDispatch();\n\n  useEffect(async () => {\n    await dispatch(getSearch(keyword));\n    if (results.length == 0) {\n      setIsExist(false);\n    } else {\n      setIsExist(true);\n    }\n  }, [results, keyword]);\n  console.log(\"render\");\n\n  const resultList = results.map((post, index) => (\n    <Post key={index} post={post}></Post>\n  ));\n\n  return (\n    <SearchTagStyled>\n      <p>Posts</p>\n      {resultList}\n    </SearchTagStyled>\n  );\n};\n\nexport default SearchTag;\n"]},"metadata":{},"sourceType":"module"}