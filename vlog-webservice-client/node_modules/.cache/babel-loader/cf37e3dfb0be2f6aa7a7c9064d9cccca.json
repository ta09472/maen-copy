{"ast":null,"code":"var _jsxFileName = \"/Users/beomsukim/2022/MAEN/maen-copy/vlog-webservice-client/src/components/main/Content.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchPost, fetchPostPopular } from \"../../redux/module/post\";\nimport Post from \"./Post\";\nimport Loader from \"./Loader\";\nimport TargetStyled from \"../styled/mainStyled/TargetStyled\";\nimport PostWrapperStyled from \"../styled/mainStyled/PostWrapperStyled\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Content = () => {\n  _s();\n\n  const [target, setTarget] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [itemLists, setItemLists] = useState([]);\n  const [isEnd, setIsEnd] = useState(false);\n  const [lastId, setLastId] = useState(\"\");\n  const [pageNum, setPageNum] = useState(0);\n\n  const getMoreItem = async () => {\n    setIsLoaded(true);\n    const response = await axios.get(`api/v1/posts/${pageNum}/popular`);\n    let items = response.data;\n    setItemLists(itemLists => itemLists.concat(items));\n    setIsLoaded(false);\n  };\n\n  useEffect(() => {\n    getMoreItem(pageNum);\n  }, [pageNum]);\n\n  const loadMore = () => {\n    setPageNum(prevPageNum => prevPageNum + 1);\n  };\n\n  const onIntersect = async (_ref, observer) => {\n    let [entry] = _ref;\n    setPageNum(prev => prev + 1);\n    console.log(pageNum);\n\n    if (entry.isIntersecting && !isLoaded) {\n      observer.unobserve(entry.target);\n\n      try {\n        await getMoreItem();\n      } catch {\n        setIsEnd(true);\n      }\n\n      observer.observe(entry.target);\n    }\n  };\n\n  useEffect(() => {\n    // fetchFeed 함수에서 loading 값이 true로 바뀐다면\n    if (isLoaded) {\n      // new 생성자로 IntersectionObserver 객체를 활용해서 observer를 생성하고\n      const observer = new IntersectionObserver( // entries를 인자로 받는 콜백함수에서\n      entries => {\n        // 인스턴스의 배열의 첫번째 값이 IntersectionObserverEntry\n        // 관찰 대상의 교차 상태가 true라면\n        if (entries[0].isIntersecting) {\n          // loadMore함수 호출\n          loadMore();\n        }\n      }, // threshold는 옵저버가 실행되기 위해 타겟의 가시성이 얼마나 필요한지 백분율로 표시\n      // 100%일 때 옵저버 실행\n      {\n        threshold: 1\n      }); // 관찰할 대상 등록\n\n      observer.observe(pageEnd.current);\n    }\n  }, [loading]);\n  useEffect(async () => {\n    let observer;\n\n    if (target && !isLoaded) {\n      observer = new IntersectionObserver(onIntersect, {\n        threshold: 0.5\n      });\n      observer.observe(target);\n    }\n\n    return () => observer && observer.disconnect();\n  }, [target]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PostWrapperStyled, {\n      children: itemLists.map((post, i) => {\n        return /*#__PURE__*/_jsxDEV(Post, {\n          post: post\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), isEnd && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uB9C8\\uC9C0\\uB9C9 \\uAC8C\\uC2DC\\uBB3C\\uC785\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }, this), !isEnd && /*#__PURE__*/_jsxDEV(TargetStyled, {\n      ref: setTarget,\n      children: isLoaded && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 52\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Content, \"yb4YGEfgbiyyE4gtkGCPaYWEr5E=\");\n\n_c = Content;\nexport default Content;\n\nvar _c;\n\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"sources":["/Users/beomsukim/2022/MAEN/maen-copy/vlog-webservice-client/src/components/main/Content.js"],"names":["React","useEffect","useState","useSelector","useDispatch","fetchPost","fetchPostPopular","Post","Loader","TargetStyled","PostWrapperStyled","axios","Content","target","setTarget","isLoaded","setIsLoaded","itemLists","setItemLists","isEnd","setIsEnd","lastId","setLastId","pageNum","setPageNum","getMoreItem","response","get","items","data","concat","loadMore","prevPageNum","onIntersect","observer","entry","prev","console","log","isIntersecting","unobserve","observe","IntersectionObserver","entries","threshold","pageEnd","current","loading","disconnect","map","post","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchPost, fetchPostPopular } from \"../../redux/module/post\";\nimport Post from \"./Post\";\nimport Loader from \"./Loader\";\nimport TargetStyled from \"../styled/mainStyled/TargetStyled\";\nimport PostWrapperStyled from \"../styled/mainStyled/PostWrapperStyled\";\nimport axios from \"axios\";\n\nconst Content = () => {\n  const [target, setTarget] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [itemLists, setItemLists] = useState([]);\n  const [isEnd, setIsEnd] = useState(false);\n  const [lastId, setLastId] = useState(\"\");\n  const [pageNum, setPageNum] = useState(0);\n\n  const getMoreItem = async () => {\n    setIsLoaded(true);\n    const response = await axios.get(`api/v1/posts/${pageNum}/popular`);\n    let items = response.data;\n    setItemLists((itemLists) => itemLists.concat(items));\n    setIsLoaded(false);\n  };\n  useEffect(() => {\n    getMoreItem(pageNum);\n  }, [pageNum]);\n\n  const loadMore = () => {\n    setPageNum((prevPageNum) => prevPageNum + 1);\n  };\n\n  const onIntersect = async ([entry], observer) => {\n    setPageNum((prev) => prev + 1);\n    console.log(pageNum);\n    if (entry.isIntersecting && !isLoaded) {\n      observer.unobserve(entry.target);\n      try {\n        await getMoreItem();\n      } catch {\n        setIsEnd(true);\n      }\n      observer.observe(entry.target);\n    }\n  };\n  useEffect(() => {\n    // fetchFeed 함수에서 loading 값이 true로 바뀐다면\n    if (isLoaded) {\n      // new 생성자로 IntersectionObserver 객체를 활용해서 observer를 생성하고\n      const observer = new IntersectionObserver(\n        // entries를 인자로 받는 콜백함수에서\n        (entries) => {\n          // 인스턴스의 배열의 첫번째 값이 IntersectionObserverEntry\n          // 관찰 대상의 교차 상태가 true라면\n          if (entries[0].isIntersecting) {\n            // loadMore함수 호출\n            loadMore();\n          }\n        },\n        // threshold는 옵저버가 실행되기 위해 타겟의 가시성이 얼마나 필요한지 백분율로 표시\n        // 100%일 때 옵저버 실행\n        { threshold: 1 }\n      );\n      // 관찰할 대상 등록\n      observer.observe(pageEnd.current);\n    }\n  }, [loading]);\n  useEffect(async () => {\n    let observer;\n    if (target && !isLoaded) {\n      observer = new IntersectionObserver(onIntersect, {\n        threshold: 0.5,\n      });\n      observer.observe(target);\n    }\n    return () => observer && observer.disconnect();\n  }, [target]);\n\n  return (\n    <>\n      <PostWrapperStyled>\n        {itemLists.map((post, i) => {\n          return <Post post={post} key={i} />;\n        })}\n      </PostWrapperStyled>\n      {isEnd && <div>마지막 게시물입니다.</div>}\n      {!isEnd && (\n        <TargetStyled ref={setTarget}>{isLoaded && <Loader />}</TargetStyled>\n      )}\n    </>\n  );\n};\n\nexport default Content;\n"]},"metadata":{},"sourceType":"module"}