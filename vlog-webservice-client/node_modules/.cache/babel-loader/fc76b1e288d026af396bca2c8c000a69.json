{"ast":null,"code":"import axios from \"axios\"; //actiontypes\n\nconst FETCH_CHANNEL = \"FETCH_CHANNEL\"; //action\n\nexport const fetchChannel = userId => async dispatch => {\n  const response = await axios.get(`api/v1/user/${user_id}`);\n  console.log(response);\n  dispatch({\n    type: FETCH_CHANNEL,\n    payload: response.data\n  });\n}; //initialState\n\nconst initialState = {\n  channelData: {},\n  myPost: []\n}; //reducer\n\nexport default function reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FETCH_CHANNEL:\n      return { ...state,\n        channelData: action.payload\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/beomsukim/2022/MAEN/maen-copy/vlog-webservice-client/src/redux/module/channel.js"],"names":["axios","FETCH_CHANNEL","fetchChannel","userId","dispatch","response","get","user_id","console","log","type","payload","data","initialState","channelData","myPost","reducer","state","action"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AAEA,MAAMC,aAAa,GAAG,eAAtB,C,CAEA;;AAEA,OAAO,MAAMC,YAAY,GAAIC,MAAD,IAAY,MAAOC,QAAP,IAAoB;AAC1D,QAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAN,CAAW,eAAcC,OAAQ,EAAjC,CAAvB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACAD,EAAAA,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAET,aAAR;AAAuBU,IAAAA,OAAO,EAAEN,QAAQ,CAACO;AAAzC,GAAD,CAAR;AACD,CAJM,C,CAMP;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE,EADM;AAEnBC,EAAAA,MAAM,EAAE;AAFW,CAArB,C,CAKA;;AAEA,eAAe,SAASC,OAAT,GAA+C;AAAA,MAA9BC,KAA8B,uEAAtBJ,YAAsB;AAAA,MAARK,MAAQ;;AAC5D,UAAQA,MAAM,CAACR,IAAf;AACE,SAAKT,aAAL;AACE,aAAO,EACL,GAAGgB,KADE;AAELH,QAAAA,WAAW,EAAEI,MAAM,CAACP;AAFf,OAAP;;AAIF;AACE,aAAOM,KAAP;AAPJ;AASD","sourcesContent":["import axios from \"axios\";\n\n//actiontypes\n\nconst FETCH_CHANNEL = \"FETCH_CHANNEL\";\n\n//action\n\nexport const fetchChannel = (userId) => async (dispatch) => {\n  const response = await axios.get(`api/v1/user/${user_id}`);\n  console.log(response);\n  dispatch({ type: FETCH_CHANNEL, payload: response.data });\n};\n\n//initialState\nconst initialState = {\n  channelData: {},\n  myPost: [],\n};\n\n//reducer\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_CHANNEL:\n      return {\n        ...state,\n        channelData: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}