{"ast":null,"code":"var _jsxFileName = \"/Users/beomsukim/2022/MAEN/maen-copy/vlog-webservice-client/src/components/main/Content.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchPost } from \"../../redux/module/post\";\nimport Post from \"./Post\";\nimport PostWrapperStyled from \"../styled/mainStyled/PostWrapperStyled\";\nimport TargetStyled from \"../styled/mainStyled/TargetStyled\";\nimport axios from \"axios\";\nimport Loader from \"./Loader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Content = () => {\n  _s();\n\n  const [lastPostId, setLastPostId] = useState(\"\");\n  const posts = useSelector(state => state.post.posts);\n  const dispatch = useDispatch();\n  const [lastId, setLastId] = useState(0);\n  const [target, setTarget] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [itemLists, setItemLists] = useState([]);\n  let last;\n\n  const getMoreItem = async (last, items) => {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    setItemLists(itemLists => itemLists.concat(items));\n    setIsLoaded(false);\n  };\n\n  const onIntersect = async (_ref, observer) => {\n    let [entry] = _ref;\n\n    if (entry.isIntersecting && !isLoaded) {\n      observer.unobserve(entry.target);\n      const response = await axios.get(`http://localhost:8080/api/v1/posts/${last}/recent`);\n      last = await response.data[response.data.length - 1].postsId;\n      console.log(last);\n      let items = response.data;\n      await getMoreItem(last, items);\n      observer.observe(entry.target);\n    }\n  };\n\n  useEffect(async () => {\n    dispatch(fetchPost());\n    let observer;\n    const res = await axios.get(\"http://localhost:8080/api/v1/posts/recent\");\n    setItemLists(res.data);\n    last = await res.data[res.data.length - 1].postsId;\n\n    if (target) {\n      observer = new IntersectionObserver(onIntersect, {\n        threshold: 0.1\n      });\n      observer.observe(target);\n    }\n\n    return () => observer && observer.disconnect();\n  }, [target]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(PostWrapperStyled, {\n      children: [posts.map((post, index) => {\n        return /*#__PURE__*/_jsxDEV(Post, {\n          post: post\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 18\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(TargetStyled, {\n        ref: setTarget,\n        children: isLoaded && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 52\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Content, \"hv4OpFpcSzg1p5px4P0vJaLI3tA=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Content;\nexport default Content;\n\nvar _c;\n\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"sources":["/Users/beomsukim/2022/MAEN/maen-copy/vlog-webservice-client/src/components/main/Content.js"],"names":["React","useEffect","useState","useSelector","useDispatch","fetchPost","Post","PostWrapperStyled","TargetStyled","axios","Loader","Content","lastPostId","setLastPostId","posts","state","post","dispatch","lastId","setLastId","target","setTarget","isLoaded","setIsLoaded","itemLists","setItemLists","last","getMoreItem","items","Promise","resolve","setTimeout","concat","onIntersect","observer","entry","isIntersecting","unobserve","response","get","data","length","postsId","console","log","observe","res","IntersectionObserver","threshold","disconnect","map","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchPost } from \"../../redux/module/post\";\nimport Post from \"./Post\";\nimport PostWrapperStyled from \"../styled/mainStyled/PostWrapperStyled\";\nimport TargetStyled from \"../styled/mainStyled/TargetStyled\";\nimport axios from \"axios\";\nimport Loader from \"./Loader\";\nconst Content = () => {\n  const [lastPostId, setLastPostId] = useState(\"\");\n\n  const posts = useSelector((state) => state.post.posts);\n  const dispatch = useDispatch();\n  const [lastId, setLastId] = useState(0);\n  const [target, setTarget] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [itemLists, setItemLists] = useState([]);\n  let last;\n\n  const getMoreItem = async (last, items) => {\n    await new Promise((resolve) => setTimeout(resolve, 500));\n    setItemLists((itemLists) => itemLists.concat(items));\n    setIsLoaded(false);\n  };\n\n  const onIntersect = async ([entry], observer) => {\n    if (entry.isIntersecting && !isLoaded) {\n      observer.unobserve(entry.target);\n      const response = await axios.get(\n        `http://localhost:8080/api/v1/posts/${last}/recent`\n      );\n      last = await response.data[response.data.length - 1].postsId;\n      console.log(last);\n      let items = response.data;\n      await getMoreItem(last, items);\n\n      observer.observe(entry.target);\n    }\n  };\n\n  useEffect(async () => {\n    dispatch(fetchPost());\n    let observer;\n    const res = await axios.get(\"http://localhost:8080/api/v1/posts/recent\");\n    setItemLists(res.data);\n    last = await res.data[res.data.length - 1].postsId;\n\n    if (target) {\n      observer = new IntersectionObserver(onIntersect, {\n        threshold: 0.1,\n      });\n      observer.observe(target);\n    }\n    return () => observer && observer.disconnect();\n  }, [target]);\n\n  return (\n    <>\n      <PostWrapperStyled>\n        {posts.map((post, index) => {\n          return <Post post={post} key={index} />;\n        })}\n        <TargetStyled ref={setTarget}>{isLoaded && <Loader />}</TargetStyled>\n      </PostWrapperStyled>\n    </>\n  );\n};\n\nexport default Content;\n"]},"metadata":{},"sourceType":"module"}