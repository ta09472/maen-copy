{"ast":null,"code":"var _jsxFileName = \"/Users/beomsukim/2022/MAEN/maen-copy/vlog-webservice-client/src/components/main/Content.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useMemo } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchPost, fetchPostPopular } from \"../../redux/module/post\";\nimport Post from \"./Post\";\nimport Loader from \"./Loader\";\nimport TargetStyled from \"../styled/mainStyled/TargetStyled\";\nimport PostWrapperStyled from \"../styled/mainStyled/PostWrapperStyled\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Content = () => {\n  _s();\n\n  const [target, setTarget] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [itemLists, setItemLists] = useState([]);\n  const [isEnd, setIsEnd] = useState(false);\n  const [lastId, setLastId] = useState(\"\");\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.post.posts);\n  let last;\n\n  const getMoreItem = async (last, items) => {\n    setIsLoaded(true);\n    await new Promise(resolve => setTimeout(resolve, 500));\n    setItemLists(itemLists => itemLists.concat(items));\n    console.log(itemLists);\n    /* 중복되는 아이템이 리스트에 추가되는 버그존재*/\n\n    setIsLoaded(false);\n  };\n\n  const onIntersect = async (_ref, observer) => {\n    let [entry] = _ref;\n\n    if (entry.isIntersecting && !isLoaded) {\n      observer.unobserve(entry.target);\n\n      try {\n        const response = await axios.get(`http://localhost:8080/api/v1/posts/${last}/popular`);\n        last = await response.data[response.data.length - 1].postsId;\n        let items = response.data;\n        await getMoreItem(last, items);\n      } catch {\n        setIsEnd(true);\n        console.log(\"end\");\n      }\n\n      observer.observe(entry.target);\n    }\n  };\n\n  useEffect(() => {\n    axios.get(\"http://localhost:8080/api/v1/posts/popular\").then(response => {\n      setItemLists(response.data);\n      last = response.data[response.data.length - 1].postsId;\n    });\n  }, []);\n  useEffect(async () => {\n    let observer;\n\n    if (target && !isLoaded) {\n      observer = new IntersectionObserver(onIntersect, {\n        threshold: 0.5\n      });\n      observer.observe(target);\n    }\n\n    return () => observer && observer.disconnect();\n  }, [target]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PostWrapperStyled, {\n      children: itemLists.map((post, i) => {\n        return /*#__PURE__*/_jsxDEV(Post, {\n          post: post\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), isEnd && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uB9C8\\uC9C0\\uB9C9 \\uAC8C\\uC2DC\\uBB3C\\uC785\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }, this), !isEnd && /*#__PURE__*/_jsxDEV(TargetStyled, {\n      ref: setTarget,\n      children: isLoaded && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 52\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Content, \"XMr41dBzFKAghGQoNltkppe+16o=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Content;\nexport default Content;\n\nvar _c;\n\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"sources":["/Users/beomsukim/2022/MAEN/maen-copy/vlog-webservice-client/src/components/main/Content.js"],"names":["React","useEffect","useState","useMemo","useSelector","useDispatch","fetchPost","fetchPostPopular","Post","Loader","TargetStyled","PostWrapperStyled","axios","Content","target","setTarget","isLoaded","setIsLoaded","itemLists","setItemLists","isEnd","setIsEnd","lastId","setLastId","dispatch","posts","state","post","last","getMoreItem","items","Promise","resolve","setTimeout","concat","console","log","onIntersect","observer","entry","isIntersecting","unobserve","response","get","data","length","postsId","observe","then","IntersectionObserver","threshold","disconnect","map","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useMemo } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchPost, fetchPostPopular } from \"../../redux/module/post\";\nimport Post from \"./Post\";\nimport Loader from \"./Loader\";\nimport TargetStyled from \"../styled/mainStyled/TargetStyled\";\nimport PostWrapperStyled from \"../styled/mainStyled/PostWrapperStyled\";\nimport axios from \"axios\";\n\nconst Content = () => {\n  const [target, setTarget] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [itemLists, setItemLists] = useState([]);\n  const [isEnd, setIsEnd] = useState(false);\n  const [lastId, setLastId] = useState(\"\");\n  const dispatch = useDispatch();\n  const posts = useSelector((state) => state.post.posts);\n  let last;\n\n  const getMoreItem = async (last, items) => {\n    setIsLoaded(true);\n    await new Promise((resolve) => setTimeout(resolve, 500));\n\n    setItemLists((itemLists) => itemLists.concat(items));\n    console.log(itemLists);\n    /* 중복되는 아이템이 리스트에 추가되는 버그존재*/\n    setIsLoaded(false);\n  };\n\n  const onIntersect = async ([entry], observer) => {\n    if (entry.isIntersecting && !isLoaded) {\n      observer.unobserve(entry.target);\n      try {\n        const response = await axios.get(\n          `http://localhost:8080/api/v1/posts/${last}/popular`\n        );\n\n        last = await response.data[response.data.length - 1].postsId;\n        let items = response.data;\n        await getMoreItem(last, items);\n      } catch {\n        setIsEnd(true);\n        console.log(\"end\");\n      }\n      observer.observe(entry.target);\n    }\n  };\n\n  useEffect(() => {\n    axios.get(\"http://localhost:8080/api/v1/posts/popular\").then((response) => {\n      setItemLists(response.data);\n      last = response.data[response.data.length - 1].postsId;\n    });\n  }, []);\n\n  useEffect(async () => {\n    let observer;\n\n    if (target && !isLoaded) {\n      observer = new IntersectionObserver(onIntersect, {\n        threshold: 0.5,\n      });\n      observer.observe(target);\n    }\n    return () => observer && observer.disconnect();\n  }, [target]);\n\n  return (\n    <>\n      <PostWrapperStyled>\n        {itemLists.map((post, i) => {\n          return <Post post={post} key={i} />;\n        })}\n      </PostWrapperStyled>\n      {isEnd && <div>마지막 게시물입니다.</div>}\n      {!isEnd && (\n        <TargetStyled ref={setTarget}>{isLoaded && <Loader />}</TargetStyled>\n      )}\n    </>\n  );\n};\n\nexport default Content;\n"]},"metadata":{},"sourceType":"module"}