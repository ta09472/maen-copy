{"ast":null,"code":"var _jsxFileName = \"/Users/beomsukim/2022/MAEN/maen-copy/vlog-webservice-client/src/components/main/Content.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchPost, fetchPostPopular } from \"../../redux/module/post\";\nimport Post from \"./Post\";\nimport Loader from \"./Loader\";\nimport TargetStyled from \"../styled/mainStyled/TargetStyled\";\nimport PostWrapperStyled from \"../styled/mainStyled/PostWrapperStyled\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Content = () => {\n  _s();\n\n  const [target, setTarget] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [itemLists, setItemLists] = useState([]);\n  const [isEnd, setIsEnd] = useState(false);\n  const [pageNumber, setPageNumber] = useState(0);\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.post.posts);\n\n  const fetchFeeds = async pageNumber => {\n    const res = await axios.get(`http://localhost:8080/api/v1/posts/${pageNum}/popular`);\n    const data = res.data; // 스프레드 연산자 이용해서 data값 업데이트\n\n    setItemLists(prev => [...prev, ...data]);\n    setIsLoaded(true);\n  };\n\n  useEffect(() => {\n    fetchFeeds(pageNumber);\n  }, [pageNumber]);\n\n  const loadMore = () => {\n    setPageNumber(prevPageNumber => prevPageNumber + 1);\n  };\n\n  useEffect(() => {\n    // fetchFeed 함수에서 loading 값이 true로 바뀐다면\n    if (loading) {\n      // new 생성자로 IntersectionObserver 객체를 활용해서 observer를 생성하고\n      const observer = new IntersectionObserver( // entries를 인자로 받는 콜백함수에서\n      entries => {\n        // 인스턴스의 배열의 첫번째 값이 IntersectionObserverEntry\n        // 관찰 대상의 교차 상태가 true라면\n        if (entries[0].isIntersecting) {\n          // loadMore함수 호출\n          loadMore();\n        }\n      }, // threshold는 옵저버가 실행되기 위해 타겟의 가시성이 얼마나 필요한지 백분율로 표시\n      // 100%일 때 옵저버 실행\n      {\n        threshold: 1\n      }); // 관찰할 대상 등록\n\n      observer.observe(pageEnd.current);\n    }\n  }, [loading]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PostWrapperStyled, {\n      children: itemLists.map((post, i) => {\n        return /*#__PURE__*/_jsxDEV(Post, {\n          post: post\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), isEnd && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uB9C8\\uC9C0\\uB9C9 \\uAC8C\\uC2DC\\uBB3C\\uC785\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this), !isEnd && /*#__PURE__*/_jsxDEV(TargetStyled, {\n      ref: setTarget,\n      children: isLoaded && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 52\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Content, \"/QBR+FteZQ305Gs9G/C2I1k6C8c=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Content;\nexport default Content;\n\nvar _c;\n\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"sources":["/Users/beomsukim/2022/MAEN/maen-copy/vlog-webservice-client/src/components/main/Content.js"],"names":["React","useEffect","useState","useSelector","useDispatch","fetchPost","fetchPostPopular","Post","Loader","TargetStyled","PostWrapperStyled","axios","Content","target","setTarget","isLoaded","setIsLoaded","itemLists","setItemLists","isEnd","setIsEnd","pageNumber","setPageNumber","dispatch","posts","state","post","fetchFeeds","res","get","pageNum","data","prev","loadMore","prevPageNumber","loading","observer","IntersectionObserver","entries","isIntersecting","threshold","observe","pageEnd","current","map","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchPost, fetchPostPopular } from \"../../redux/module/post\";\nimport Post from \"./Post\";\nimport Loader from \"./Loader\";\nimport TargetStyled from \"../styled/mainStyled/TargetStyled\";\nimport PostWrapperStyled from \"../styled/mainStyled/PostWrapperStyled\";\nimport axios from \"axios\";\n\nconst Content = () => {\n  const [target, setTarget] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [itemLists, setItemLists] = useState([]);\n  const [isEnd, setIsEnd] = useState(false);\n  const [pageNumber, setPageNumber] = useState(0);\n\n  const dispatch = useDispatch();\n  const posts = useSelector((state) => state.post.posts);\n\n  const fetchFeeds = async (pageNumber) => {\n    const res = await axios.get(\n      `http://localhost:8080/api/v1/posts/${pageNum}/popular`\n    );\n    const data = res.data;\n    // 스프레드 연산자 이용해서 data값 업데이트\n    setItemLists((prev) => [...prev, ...data]);\n    setIsLoaded(true);\n  };\n  useEffect(() => {\n    fetchFeeds(pageNumber);\n  }, [pageNumber]);\n  const loadMore = () => {\n    setPageNumber((prevPageNumber) => prevPageNumber + 1);\n  };\n  useEffect(() => {\n    // fetchFeed 함수에서 loading 값이 true로 바뀐다면\n    if (loading) {\n      // new 생성자로 IntersectionObserver 객체를 활용해서 observer를 생성하고\n      const observer = new IntersectionObserver(\n        // entries를 인자로 받는 콜백함수에서\n        (entries) => {\n          // 인스턴스의 배열의 첫번째 값이 IntersectionObserverEntry\n          // 관찰 대상의 교차 상태가 true라면\n          if (entries[0].isIntersecting) {\n            // loadMore함수 호출\n            loadMore();\n          }\n        },\n        // threshold는 옵저버가 실행되기 위해 타겟의 가시성이 얼마나 필요한지 백분율로 표시\n        // 100%일 때 옵저버 실행\n        { threshold: 1 }\n      );\n      // 관찰할 대상 등록\n      observer.observe(pageEnd.current);\n    }\n  }, [loading]);\n\n  return (\n    <>\n      <PostWrapperStyled>\n        {itemLists.map((post, i) => {\n          return <Post post={post} key={i} />;\n        })}\n      </PostWrapperStyled>\n      {isEnd && <div>마지막 게시물입니다.</div>}\n      {!isEnd && (\n        <TargetStyled ref={setTarget}>{isLoaded && <Loader />}</TargetStyled>\n      )}\n    </>\n  );\n};\n\nexport default Content;\n"]},"metadata":{},"sourceType":"module"}