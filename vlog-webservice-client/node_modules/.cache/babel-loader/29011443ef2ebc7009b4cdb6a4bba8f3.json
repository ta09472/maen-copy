{"ast":null,"code":"var _jsxFileName = \"/Users/beomsukim/2022/MAEN/maen-copy/vlog-webservice-client/src/components/main/Content.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchPost, fetchPostPopular } from \"../../redux/module/post\";\nimport Post from \"./Post\";\nimport Loader from \"./Loader\";\nimport TargetStyled from \"../styled/mainStyled/TargetStyled\";\nimport PostWrapperStyled from \"../styled/mainStyled/PostWrapperStyled\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Content = () => {\n  _s();\n\n  const [target, setTarget] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [itemLists, setItemLists] = useState([]);\n  const [isEnd, setIsEnd] = useState(false);\n  const [pageNum, setPageNum] = useState(0);\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.post.posts);\n  `http://localhost:8080/api/v1/posts/${pageNum}/popular`;\n\n  const fetchFeeds = async pageNumber => {\n    const res = await fetch(MAIN_FEEDS + `?page=${pageNumber}`, {\n      headers: {\n        Authorization: localStorage.getItem(\"token\")\n      }\n    });\n    const data = await res.json(); // 스프레드 연산자 이용해서 data값 업데이트\n\n    setFeed(prev => [...prev, ...data.feed]);\n    setLoading(true);\n  };\n\n  const onIntersect = async (_ref, observer) => {\n    let [entry] = _ref;\n\n    if (entry.isIntersecting && !isLoaded) {\n      observer.unobserve(entry.target);\n      await getMoreItem();\n      setIsEnd(true);\n      observer.observe(entry.target);\n    }\n  };\n\n  useEffect(async () => {\n    let observer;\n\n    if (target && !isLoaded) {\n      observer = new IntersectionObserver(onIntersect, {\n        threshold: 0.5\n      });\n      observer.observe(target);\n    }\n\n    return () => observer && observer.disconnect();\n  }, [target]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PostWrapperStyled, {\n      children: itemLists.map((post, i) => {\n        return /*#__PURE__*/_jsxDEV(Post, {\n          post: post\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), isEnd && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uB9C8\\uC9C0\\uB9C9 \\uAC8C\\uC2DC\\uBB3C\\uC785\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this), !isEnd && /*#__PURE__*/_jsxDEV(TargetStyled, {\n      ref: setTarget,\n      children: isLoaded && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 52\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Content, \"Qd2i7+3PdVXJwTEO9+HUKXWaQLo=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Content;\nexport default Content;\n\nvar _c;\n\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"sources":["/Users/beomsukim/2022/MAEN/maen-copy/vlog-webservice-client/src/components/main/Content.js"],"names":["React","useEffect","useState","useSelector","useDispatch","fetchPost","fetchPostPopular","Post","Loader","TargetStyled","PostWrapperStyled","axios","Content","target","setTarget","isLoaded","setIsLoaded","itemLists","setItemLists","isEnd","setIsEnd","pageNum","setPageNum","dispatch","posts","state","post","fetchFeeds","pageNumber","res","fetch","MAIN_FEEDS","headers","Authorization","localStorage","getItem","data","json","setFeed","prev","feed","setLoading","onIntersect","observer","entry","isIntersecting","unobserve","getMoreItem","observe","IntersectionObserver","threshold","disconnect","map","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchPost, fetchPostPopular } from \"../../redux/module/post\";\nimport Post from \"./Post\";\nimport Loader from \"./Loader\";\nimport TargetStyled from \"../styled/mainStyled/TargetStyled\";\nimport PostWrapperStyled from \"../styled/mainStyled/PostWrapperStyled\";\nimport axios from \"axios\";\n\nconst Content = () => {\n  const [target, setTarget] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [itemLists, setItemLists] = useState([]);\n  const [isEnd, setIsEnd] = useState(false);\n  const [pageNum, setPageNum] = useState(0);\n\n  const dispatch = useDispatch();\n  const posts = useSelector((state) => state.post.posts);\n  `http://localhost:8080/api/v1/posts/${pageNum}/popular`;\n  const fetchFeeds = async (pageNumber) => {\n    const res = await fetch(MAIN_FEEDS + `?page=${pageNumber}`, {\n      headers: {\n        Authorization: localStorage.getItem(\"token\"),\n      },\n    });\n    const data = await res.json();\n    // 스프레드 연산자 이용해서 data값 업데이트\n    setFeed((prev) => [...prev, ...data.feed]);\n    setLoading(true);\n  };\n\n  const onIntersect = async ([entry], observer) => {\n    if (entry.isIntersecting && !isLoaded) {\n      observer.unobserve(entry.target);\n\n      await getMoreItem();\n      setIsEnd(true);\n\n      observer.observe(entry.target);\n    }\n  };\n\n  useEffect(async () => {\n    let observer;\n    if (target && !isLoaded) {\n      observer = new IntersectionObserver(onIntersect, {\n        threshold: 0.5,\n      });\n      observer.observe(target);\n    }\n    return () => observer && observer.disconnect();\n  }, [target]);\n\n  return (\n    <>\n      <PostWrapperStyled>\n        {itemLists.map((post, i) => {\n          return <Post post={post} key={i} />;\n        })}\n      </PostWrapperStyled>\n      {isEnd && <div>마지막 게시물입니다.</div>}\n      {!isEnd && (\n        <TargetStyled ref={setTarget}>{isLoaded && <Loader />}</TargetStyled>\n      )}\n    </>\n  );\n};\n\nexport default Content;\n"]},"metadata":{},"sourceType":"module"}