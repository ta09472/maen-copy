{"ast":null,"code":"var _jsxFileName = \"/Users/beomsukim/2022/MAEN/maen-copy/vlog-webservice-client/src/components/recent/Recent.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Header from \"../common/Header\";\nimport UploadButton from \"../common/UploadButton\";\nimport SideNav from \"../common/SideNav\";\nimport RecentContent from \"./RecentContent\";\nimport Sort from \"../main/Sort\";\nimport MainWrapper from \"../styled/commonStyled/MainWrapper\";\nimport ContentWrapper from \"../styled/mainStyled/ContentWrapper\";\nimport HomeWrapper from \"../styled/mainStyled/HomeWrapper\";\nimport Upload from \"../upload/Upload\";\nimport { Route, Routes, Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Recent = () => {\n  _s();\n\n  const [target, setTarget] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [itemLists, setItemLists] = useState([]);\n  const [isEnd, setIsEnd] = useState(false);\n  const posts = useSelector(state => state.post.posts);\n  const dispatch = useDispatch();\n  let last;\n\n  const getMoreItem = async (last, items) => {\n    setIsLoaded(true);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    setItemLists(itemLists => itemLists.concat(items));\n    setIsLoaded(false);\n  };\n\n  const onIntersect = async (_ref, observer) => {\n    let [entry] = _ref;\n\n    if (entry.isIntersecting && !isLoaded) {\n      observer.unobserve(entry.target);\n\n      try {\n        const response = await axios.get(`http://localhost:8080/api/v1/posts/${last}/popular`);\n        last = await response.data[response.data.length - 1].postsId;\n        let items = response.data;\n        await getMoreItem(last, items);\n      } catch {\n        setIsEnd(true);\n      }\n\n      observer.observe(entry.target);\n    }\n  };\n\n  useEffect(() => {\n    dispatch(fetchPostPopular());\n  }, []);\n  useEffect(async () => {\n    let observer;\n    const res = await axios.get(\"http://localhost:8080/api/v1/posts/popular\");\n    setItemLists(posts);\n    last = await res.data[res.data.length - 1].postsId;\n\n    if (target) {\n      observer = new IntersectionObserver(onIntersect, {\n        threshold: 0.5\n      });\n      observer.observe(target);\n    }\n\n    return () => observer && observer.disconnect();\n  }, [target]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PostWrapperStyled, {\n      children: itemLists.map((post, i) => {\n        return /*#__PURE__*/_jsxDEV(Post, {\n          post: post\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), isEnd ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uB9C8\\uC9C0\\uB9C9 \\uAC8C\\uC2DC\\uBB3C\\uC785\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 16\n    }, this) : null, /*#__PURE__*/_jsxDEV(TargetStyled, {\n      ref: setTarget,\n      children: isLoaded && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 50\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Recent, \"5Sdet17rju9ZdxDo6/i+zJdK6sM=\", true);\n\n_c = Recent;\nexport default Recent;\n\nvar _c;\n\n$RefreshReg$(_c, \"Recent\");","map":{"version":3,"sources":["/Users/beomsukim/2022/MAEN/maen-copy/vlog-webservice-client/src/components/recent/Recent.js"],"names":["React","Header","UploadButton","SideNav","RecentContent","Sort","MainWrapper","ContentWrapper","HomeWrapper","Upload","Route","Routes","Link","Recent","target","setTarget","useState","isLoaded","setIsLoaded","itemLists","setItemLists","isEnd","setIsEnd","posts","useSelector","state","post","dispatch","useDispatch","last","getMoreItem","items","Promise","resolve","setTimeout","concat","onIntersect","observer","entry","isIntersecting","unobserve","response","axios","get","data","length","postsId","observe","useEffect","fetchPostPopular","res","IntersectionObserver","threshold","disconnect","map","i"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Header from \"../common/Header\";\nimport UploadButton from \"../common/UploadButton\";\nimport SideNav from \"../common/SideNav\";\nimport RecentContent from \"./RecentContent\";\nimport Sort from \"../main/Sort\";\nimport MainWrapper from \"../styled/commonStyled/MainWrapper\";\nimport ContentWrapper from \"../styled/mainStyled/ContentWrapper\";\nimport HomeWrapper from \"../styled/mainStyled/HomeWrapper\";\nimport Upload from \"../upload/Upload\";\nimport { Route, Routes, Link } from \"react-router-dom\";\n\nconst Recent = () => {\n  const [target, setTarget] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [itemLists, setItemLists] = useState([]);\n  const [isEnd, setIsEnd] = useState(false);\n  const posts = useSelector((state) => state.post.posts);\n  const dispatch = useDispatch();\n  let last;\n\n  const getMoreItem = async (last, items) => {\n    setIsLoaded(true);\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    setItemLists((itemLists) => itemLists.concat(items));\n    setIsLoaded(false);\n  };\n\n  const onIntersect = async ([entry], observer) => {\n    if (entry.isIntersecting && !isLoaded) {\n      observer.unobserve(entry.target);\n      try {\n        const response = await axios.get(\n          `http://localhost:8080/api/v1/posts/${last}/popular`\n        );\n        last = await response.data[response.data.length - 1].postsId;\n        let items = response.data;\n        await getMoreItem(last, items);\n      } catch {\n        setIsEnd(true);\n      }\n\n      observer.observe(entry.target);\n    }\n  };\n  useEffect(() => {\n    dispatch(fetchPostPopular());\n  }, []);\n\n  useEffect(async () => {\n    let observer;\n    const res = await axios.get(\"http://localhost:8080/api/v1/posts/popular\");\n    setItemLists(posts);\n    last = await res.data[res.data.length - 1].postsId;\n\n    if (target) {\n      observer = new IntersectionObserver(onIntersect, {\n        threshold: 0.5,\n      });\n      observer.observe(target);\n    }\n    return () => observer && observer.disconnect();\n  }, [target]);\n\n  return (\n    <>\n      <PostWrapperStyled>\n        {itemLists.map((post, i) => {\n          return <Post post={post} key={i} />;\n        })}\n      </PostWrapperStyled>\n      {isEnd ? <div>마지막 게시물입니다.</div> : null}\n      <TargetStyled ref={setTarget}>{isLoaded && <Loader />}</TargetStyled>\n    </>\n  );\n};\n\nexport default Recent;\n"]},"metadata":{},"sourceType":"module"}