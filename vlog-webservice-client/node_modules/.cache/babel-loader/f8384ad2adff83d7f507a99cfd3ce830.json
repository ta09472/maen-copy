{"ast":null,"code":"var _jsxFileName = \"/Users/beomsukim/2022/MAEN/maen-copy/vlog-webservice-client/src/components/recent/RecentContent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useMemo } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchPost } from \"../../redux/module/post\";\nimport Post from \"../main/Post\";\nimport Loader from \"../main/Loader\";\nimport axios from \"axios\";\nimport PostWrapperStyled from \"../styled/mainStyled/PostWrapperStyled\";\nimport TargetStyled from \"../styled/mainStyled/TargetStyled\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst RecentContent = () => {\n  _s();\n\n  const [target, setTarget] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [itemLists, setItemLists] = useState([]);\n  const [isEnd, setIsEnd] = useState(false);\n  const posts = useSelector(state => state.post.posts);\n  const dispatch = useDispatch();\n  let last;\n\n  const getMoreItem = async (last, items) => {\n    setIsLoaded(true);\n    /* await new Promise((resolve) => setTimeout(resolve, 1000)); */\n\n    setItemLists(itemLists => itemLists.concat(items));\n    setIsLoaded(false);\n  };\n\n  const onIntersect = async (_ref, observer) => {\n    let [entry] = _ref;\n\n    if (entry.isIntersecting && !isLoaded) {\n      observer.unobserve(entry.target);\n\n      try {\n        const response = await axios.get(`http://localhost:8080/api/v1/posts/${last}/recent`);\n        last = await response.data[response.data.length - 1].postsId;\n        let items = response.data;\n        await getMoreItem(last, items);\n      } catch {\n        setIsEnd(true);\n      }\n\n      observer.observe(entry.target);\n    }\n  };\n\n  useEffect(() => {\n    dispatch(fetchPost());\n    setItemLists(posts);\n  }, [item]);\n  useEffect(async () => {\n    let observer;\n    const res = await axios.get(\"http://localhost:8080/api/v1/posts/recent\");\n    setItemLists(posts);\n    last = await res.data[res.data.length - 1].postsId;\n\n    if (target) {\n      observer = new IntersectionObserver(onIntersect, {\n        threshold: 0.5\n      });\n      observer.observe(target);\n    }\n\n    return () => observer && observer.disconnect();\n  }, [target]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PostWrapperStyled, {\n      children: itemLists.map((post, i) => {\n        return /*#__PURE__*/_jsxDEV(Post, {\n          post: post\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), isEnd && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uB9C8\\uC9C0\\uB9C9 \\uAC8C\\uC2DC\\uBB3C\\uC785\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(TargetStyled, {\n      ref: setTarget,\n      children: isLoaded && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 50\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(RecentContent, \"5Sdet17rju9ZdxDo6/i+zJdK6sM=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = RecentContent;\nexport default RecentContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecentContent\");","map":{"version":3,"sources":["/Users/beomsukim/2022/MAEN/maen-copy/vlog-webservice-client/src/components/recent/RecentContent.js"],"names":["React","useEffect","useState","useMemo","useSelector","useDispatch","fetchPost","Post","Loader","axios","PostWrapperStyled","TargetStyled","RecentContent","target","setTarget","isLoaded","setIsLoaded","itemLists","setItemLists","isEnd","setIsEnd","posts","state","post","dispatch","last","getMoreItem","items","concat","onIntersect","observer","entry","isIntersecting","unobserve","response","get","data","length","postsId","observe","item","res","IntersectionObserver","threshold","disconnect","map","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useMemo } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchPost } from \"../../redux/module/post\";\nimport Post from \"../main/Post\";\nimport Loader from \"../main/Loader\";\nimport axios from \"axios\";\nimport PostWrapperStyled from \"../styled/mainStyled/PostWrapperStyled\";\nimport TargetStyled from \"../styled/mainStyled/TargetStyled\";\n\nconst RecentContent = () => {\n  const [target, setTarget] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [itemLists, setItemLists] = useState([]);\n  const [isEnd, setIsEnd] = useState(false);\n  const posts = useSelector((state) => state.post.posts);\n  const dispatch = useDispatch();\n  let last;\n\n  const getMoreItem = async (last, items) => {\n    setIsLoaded(true);\n    /* await new Promise((resolve) => setTimeout(resolve, 1000)); */\n    setItemLists((itemLists) => itemLists.concat(items));\n    setIsLoaded(false);\n  };\n\n  const onIntersect = async ([entry], observer) => {\n    if (entry.isIntersecting && !isLoaded) {\n      observer.unobserve(entry.target);\n      try {\n        const response = await axios.get(\n          `http://localhost:8080/api/v1/posts/${last}/recent`\n        );\n        last = await response.data[response.data.length - 1].postsId;\n        let items = response.data;\n        await getMoreItem(last, items);\n      } catch {\n        setIsEnd(true);\n      }\n\n      observer.observe(entry.target);\n    }\n  };\n\n  useEffect(() => {\n    dispatch(fetchPost());\n    setItemLists(posts);\n  }, [item]);\n\n  useEffect(async () => {\n    let observer;\n    const res = await axios.get(\"http://localhost:8080/api/v1/posts/recent\");\n    setItemLists(posts);\n    last = await res.data[res.data.length - 1].postsId;\n    if (target) {\n      observer = new IntersectionObserver(onIntersect, {\n        threshold: 0.5,\n      });\n      observer.observe(target);\n    }\n    return () => observer && observer.disconnect();\n  }, [target]);\n\n  return (\n    <>\n      <PostWrapperStyled>\n        {itemLists.map((post, i) => {\n          return <Post post={post} key={i} />;\n        })}\n      </PostWrapperStyled>\n      {isEnd && <div>마지막 게시물입니다.</div>}\n\n      <TargetStyled ref={setTarget}>{isLoaded && <Loader />}</TargetStyled>\n    </>\n  );\n};\n\nexport default RecentContent;\n"]},"metadata":{},"sourceType":"module"}